#spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=employee_db;encrypt=true;trustServerCertificate=true;
#spring.datasource.username=springboot
#spring.datasource.password=springboot
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#eureka.instance.hostname=localhost
#server.port=8081

spring.application.name=EMPLOYEE-SERVICE
# Config server:
spring.config.import=optional:configserver:http://localhost:8888

## Message broker
#spring.rabbitmq.host=localhost
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=guest
#spring.rabbitmq.password=guest

management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

logging.level.com.mello.microservices.employeeservice.service.client.DepartmentAPIClient=DEBUG

# Actuator endpoints for circuit breaker
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always



# Circuit breaker configuration. Refer to: https://resilience4j.readme.io/docs/circuitbreaker
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.register-health-indicator=true
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.sliding-window-size=10
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.sliding-window-type=COUNT_BASED

# retry configuration
resilience4j.retry.instances.EMPLOYEE-SERVICE.max-attempts=5
resilience4j.retry.instances.EMPLOYEE-SERVICE.wait-duration=1s

#Kafka
spring.kafka.producer.bootstrap-servers= localhost:9092
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.topic.name=employee-topic

spring.graphql.cors.allowed-methods=*
spring.graphql.cors.allowed-origins=*